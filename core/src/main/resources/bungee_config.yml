languages:
  # The language name. This will influence the language key in the translation files.
  # It's recommended to follow this syntax: xx_XX
  # It's also not recommended changing this after someone has joined your server,
  # as their language will reset to default.
  en_GB:
    # This is the encoded flag code to show up the banner.
    # To get a working code, you should visit https://www.needcoolshoes.com/banner and create your banner.
    # When you finish, you should notice that the link as changed. Just copy the code generated by it.
    # i.e. If the link is https://www.needcoolshoes.com/banner?=eapwplpnpmbzbj then the code will be eapwplpnpmbzbj
    flag: eapwplpnpmbzbj
    # The Minecraft code is the Minecraft language code. You can find a complete list here:
    # https://minecraft.gamepedia.com/Language
    minecraft-code: [ en_GB, en_AU, en_CA, en_NZ, en_PT, en_UD, en_US ]
    # The display name. This will be the language name in non-code version. For example, en_UK should be English (UK)
    # Feel free to use colours here!
    display-name: '&3English (UK)'
    # The languages to check for translations when this language does not have them.
    # The main language is also always checked last, even if you leave this empty.
    fallback-languages:
      - pt_PT
    # Use this to run commands on language change.
    # The commands must not start with a slash.
    # Prefix with the desired type. Available types: 'PLAYER', 'SERVER', 'BUNGEE', 'BUNGEE_PLAYER'.
    # i. e. "PLAYER:say I'm using English now!"
    # You can also limit the command to certain servers:
    # i. e. "BUNGEE:lobby,lobby-2,lobby-3:alert This will only run on 3 servers!"
    # NOTE: If a command you're using contains a ':' and you want it to be universal, do something like this:
    # i. e. "PLAYER::give @a minecraft:dirt"
    # Please uncomment the lines below to start using this feature.
    # Available variables:
    # %player% - Replaced with the player's name.
    # %uuid% - Replaced with the player's UUID (with dashes).
  #  commands:
  #    - 'SERVER:say %player% (%uuid%) has just changed their language!'
  pt_PT:
    flag: bacLlt
    minecraft-code: [ pt_PT, pt_BR ]
    display-name: '&3Portuguese (Portugal)'
    fallback-languages: []
  #  commands:
  #    - 'SERVER:say %player% (%uuid%) has just changed their language!'

# The main language is the fallback language. If some message is not found, it will try to get it from here before
# returning an error message.
# Also, if you delete any language, the players with that language will have their language changed to this.
main-language: en_GB

# When enabled, the commands inside each language will run when the player joins.
run-language-commands-on-join: false

# When enabled, the plugin will set the player's Triton language to their game language every time.
# By default, the plugin only does this when they join the server for the first time.
# It is recommended to leave this off for user experience reasons.
force-client-locale-on-join: false

# Automatically reload the plugin (equivalent to /twin reload) every X seconds.
# Might be useful if you're editing the translations' folder with symlinks or another program.
# Set to -1 to disable (default)
config-auto-refresh-interval: -1

# To access TWIN, you need a special token.
# To get it, join our Discord server at https://triton.rexcantor64.com/discord or DM me on Spigot.
twin-token: ""

# Triton command aliases.
# Add or remove aliases here to customize which commands are detected by Triton.
# The /triton command cannot be edited.
command-aliases:
  - lang
  - language

# Determines how verbose the logging will be. A lower value means less verbose.
# 0 (default): Only errors and startup messages are logged to the console.
# 1: Also outputs details about config initialization and other relevant information (translation count, startup time, etc).
# 2: Also outputs information related to reading/writing files, as well as communication with BungeeCord and a database.
# 3: Logs EVERYTHING. Only recommended for debugging purposes. When enabled, every translation job will be logged to the console.
log-level: 0

# This section controls the storage location of player data and translations.
# If using a database, the tables/collections will be created automatically for you.
# You can use '/triton database upload' to upload the local translations to a remote storage.
# The same settings MUST be placed on the Triton config for all Spigot servers under the same network
storage:
  # Valid options: 'local', 'mysql', 'mongodb'
  type: 'local'
  # The options below this are for non-local storage only
  host: "localhost"
  port: 3306
  database: "triton"
  username: "root"
  password: ""
  table-prefix: "triton_"
  # Configuration options for HikariCP
  # Do not change if you don't know what you're doing!
  mysql-pool-advanced:
    # Sets the maximum size of the MySQL connection pool.
    # https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing
    maximum-pool-size: 10
    # Sets the minimum number of idle connections that the pool will try to maintain.
    minimum-idle: 10
    # This setting controls the maximum lifetime of a connection in the pool in milliseconds.
    maximum-lifetime: 1800000 # 30 minutes
    # This setting controls the maximum number of milliseconds that the plugin will wait for a
    # connection from the pool, before timing out.
    connection-timeout: 5000 # 5 seconds

    # This setting allows you to define extra properties for connections.
    properties:
    #  useUnicode: true
    #  characterEncoding: utf8
    #  useSSL: false
    #  verifyServerCertificate: false

# Here you can enable and disable certain features of the plugin.
# Every section contains a "syntax-lang", "syntax-args" and "syntax-arg" field. These are used in the placeholders.
# If you change them, make sure to adjust accordingly in your plugins.
language-creation:
  chat:
    # Should the plugin check for placeholders in chat messages?
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  actionbars:
    # Should the plugin check for placeholders in action bars?
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  titles:
    # Should the plugin check for placeholders in titles and subtitles?
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  kick:
    # Should the plugin check for placeholders in kick messages?
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  tab:
    # Should the plugin check for placeholders in tab?
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  bossbars:
    # Should the plugin check for placeholders in bossbars? (1.9+)
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  motd:
    # Should the plugin check for placeholders in the MOTD?
    # This works by associating each IP with a language that changes when a player changes language.
    # When the IP is unknown, the default language is used.
    enabled: true
    syntax-lang: lang
    syntax-args: args
    syntax-arg: arg
  # If any message contains a placeholder with the key defined in the field below, that message won't be sent to the players (console will still receive it).
  # Leave empty to disable this feature (it's disabled by default).
  # Example (assuming you have the default values on your config and you set disabled-line to 'disabled.line'):
  # If any message contains '[lang]disabled.line[/lang]' it won't be sent.
  disabled-line: ''
  # Translate messages that go through console to the default language.
  # For UX reasons, messages that contain disabled line placeholders aren't touched.
  # Changing this requires a full server restart.
  terminal: false
  # ADVANCED: DO NOT CHANGE UNLESS YOU KNOW WHAT YOU'RE DOING
  # How many placeholders the plugin should try to translate before giving up.
  # This prevents infinite loops where the 404 message has a missing placeholder.
  # Default is 10
  max-placeholders-in-message: 10
